// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int           @id @default(autoincrement())
  uuid                  String        @unique @default(uuid()) @db.Uuid
  firstName             String        @map("first_name") @db.VarChar(50)
  lastName              String        @map("last_name") @db.VarChar(50)
  password              String        @db.VarChar(120)
  email                 String        @unique @db.VarChar(50)
  emailVerifiedAt       DateTime?     @map("email_verified_at")
  role                  Role          @default(USER)
  passwordVerifiedToken String?       @map("password_verified_token") @db.VarChar(50)
  emailVerifiedToken    String?       @map("email_verified_token") @db.VarChar(50)
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime?     @updatedAt @map("updated_at")
  likeProducts          LikeProduct[]
  orders                Order[]
  tokens                Token[]
  images                Image[]

  @@map(name: "users")
}

model Category {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @default(uuid()) @db.Uuid
  name        String    @db.VarChar(50)
  description String?   @db.Text
  isEnabled   Boolean   @default(true) @map("is_enabled")
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map(name: "categories")
}

model Product {
  id              Int           @id @default(autoincrement())
  uuid            String        @unique @default(uuid()) @db.Uuid
  name            String        @db.VarChar(255)
  brand           String        @db.VarChar(50)
  description     String?       @db.Text
  categoryId      Int           @map("category_id")
  category        Category      @relation(fields: [categoryId], references: [id])
  measurementUnit String        @default("unit") @map("measurement_unit")
  unitPrice       Int           @map("unit_price")
  stock           Int?          @default(0)
  isEnabled       Boolean       @default(true) @map("is_enabled")
  likeCounter     Int?          @default(0) @map("like_counter")
  likeProducts    LikeProduct[]
  orderDetails    OrderDetail[]
  images          Image[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map(name: "products")
}

model Image {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid()) @db.Uuid
  productId Int      @map("product_id")
  product   Product  @relation(fields: [productId], references: [id])
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  key       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "images")
}

model LikeProduct {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid()) @db.Uuid
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  productId Int      @map("product_id")
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId], name: "likeIdentifier")
  @@map(name: "like_products")
}

model Order {
  id           Int           @id @default(autoincrement())
  uuid         String        @unique @default(uuid()) @db.Uuid
  clientId     User          @relation(fields: [userId], references: [id])
  userId       Int
  status       Status        @default(ONCART)
  totalPrice   Int?          @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  orderDetails OrderDetail[]

  @@map(name: "orders")
}

model OrderDetail {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid()) @db.Uuid
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  unitPrice Int?     @default(0) @map("unit_price")
  quantity  Int      @default(0)
  subtotal  Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "order_details")
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userUuid], references: [uuid])
  userUuid  String   @map("user_uuid") @db.Uuid
  expiredAt String   @db.VarChar(5)
  createdAt DateTime @default(now())

  @@map(name: "tokens")
}

enum Role {
  USER
  MANAGER
}

enum Status {
  ONCART
  ORDERED
  SHIPPED
  RECEIVED
}
